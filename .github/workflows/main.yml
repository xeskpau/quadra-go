name: CI

# Status badge for README
# [![CI](https://github.com/${{ github.repository }}/actions/workflows/main.yml/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/main.yml)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install dependencies
      run: |
        if [ "${{ matrix.node-version }}" = "18.x" ]; then
          npm install -g npm@10.2.4
        else
          npm install -g npm@latest
        fi
        npm ci
        npm install -D wait-on
    
    - name: Create .env file for testing
      run: |
        echo "REACT_APP_FIREBASE_API_KEY=test-api-key" > .env
        echo "REACT_APP_FIREBASE_AUTH_DOMAIN=test-project-id.firebaseapp.com" >> .env
        echo "REACT_APP_FIREBASE_PROJECT_ID=test-project-id" >> .env
        echo "REACT_APP_FIREBASE_STORAGE_BUCKET=test-project-id.appspot.com" >> .env
        echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=123456789" >> .env
        echo "REACT_APP_FIREBASE_APP_ID=1:123456789:web:abcdef" >> .env
        echo "REACT_APP_FIREBASE_MEASUREMENT_ID=G-TESTID" >> .env
      
    - name: Run unit tests with coverage
      run: npm run test:ci
      env:
        CI: true
      
    - name: Build application
      run: npm run build
      env:
        CI: true
        REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
      
    - name: Install Cypress
      run: npx cypress install
        
    - name: Start app and run Cypress tests
      run: |
        npm start & npx wait-on --timeout 60000 http://localhost:3000
        npm run test:e2e
      env:
        CI: true
        CYPRESS_RECORD: false
        REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          cypress/videos/
          cypress/screenshots/
        if-no-files-found: ignore 